from gurobipy import *

import time

"""
x_roundNumber_rowNumber_columnNumber_LaneNumber

"""

class Twinkle:
    def __init__(self, rounds, activebits):
        self.rounds = rounds
        self.activebits = activebits
        self.rowsize = 4
        self.colsize = 4
        self.lanesize = 80

        self.filename_model = "Twinkle_" + str(self.rounds) + "_" + str(self.activebits) + ".lp"
        self.filename_result = "result_" + str(self.rounds) + "_" + str(self.activebits) + ".txt"
        fileobj = open(self.filename_model, "w")
        fileobj.close()
        fileboj = open(self.filename_result, "w")
        fileobj.close()

    # Linear inequalities for the TWINKLE Sbox
    S_T = [[1, 1, 1, 1, -1, -1, -1, -1, 0],\
        [-3, -6, -3, -5, 1, 1, 2, 3, 10],\
        [1, 1, 0, 0, -3, -2, 2, -2, 3],\
        [1, 0, 0, 1, 2, -2, -3, -2, 3],\
        [-3, -1, -5, -2, 6, 1, 5, 3, 4],\
        [-1, 0, -1, 0, -2, 1, -2, 1, 4],\
        [-1, -1, 0, -1, 2, 2, 2, 1, 0],\
        [-2, -2, -1, 0, -3, 2, -1, 1, 6],\
        [0, 1, 1, 0, -2, -2, 1, -1, 2],\
        [-2, 0, -1, -2, -1, 2, -3, 1, 6],\
        [0, 0, 1, 1, 1, -2, -2, -1, 2],\
        [1, 0, 2, 0, -1, 0, -1, -1, 1],\
        [0, -1, 0, -1, 1, -1, 0, 1, 2]]
    NUMBER = 9

    @staticmethod
    def CreateVariables(n):
        """
        The variables before s-box.
        """
        array = []
        for i in range(0,3):
            for j in range(0,3):
                for k in range(0,79):
                    array.append("x" + "_" + str(self.rounds) + "_" + str(i) + "_" + str(j) + "_" + str(k))
        return array

    @staticmethod
    def CreateVariables(n):
        """
        The variables after s-box.
        """
        array = []
        for i in range(0,3):
            for j in range(0,3):
                for k in range(0,79):
                    array.append("y" + "_" + str(self.rounds) + "_" + str(i) + "_" + str(j) + "_" + str(k))
        return array

    @staticmethod
    def CreateVariables(n):
        """
        The variables after lanerotation0.
        """
        array = []
        for i in range(0,3):
            for j in range(0,3):
                for k in range(0,79):
                    array.append("z" + "_" + str(self.rounds) + "_" + str(i) + "_" + str(j) + "_" + str(k))
        return array

    # @staticmethod
    # def CreateVariables(n):
    #     """
    #     The variables after mixslice.
    #     """
    #     array = []
    #     for i in range(0, self.rowsize):
    #         for j in range(0, self.rowsize):
    #             for k in range(0, self.lanesize):
    #                 array.append("w" + "_" + str(self.rounds) + "_" + str(i) + "_" + str(j) + "_" + str(k))
    #     return array


    def create_variables(n, s):
        """
        Generate the variables used in the model.
        """
        array = ["%s_%d_%d_%d_%d" % (s, n, i, j, k)
                  for k in range(80) for j in range(4) for i in range(4)]

        return array


    def CreateObjectiveFunction(self):
        """
        Create objective function of the MILP model
        """
        fileobj = open(self.filename_model, "a")
        fileobj.write("Minimize\n")
        eqn = []
        for i in range(0, self.rowsize):
            for j in range(0, self.colsize):
                for k in range(0, self.lanesize):
                    eqn.append("x" + "_" + str(self.rounds) + "_" + str(i) + "_" + str(j) + "_" + str(k))

        temp = " + ".join(eqn)
        fileobj.write(temp)
        fileobj.write("\n")
        fileobj.close()
        

    def sbox(self, variable1, variable2):
        """
        Generate the constraints by Sbox layer.
        """
        fileobj = open(self.filename_model, "a")
        print('var1:', variable1)
        for j in range(0, self.colsize):
            for k in range(0, self.lanesize):
                for coff in Twinkle.S_T:
                    temp = []
                    for u in range(0, self.rowsize):
                        temp.append(str(coff[u]) + " " + variable1[u + 4*j + 16*k])
                    for v in range(0, self.rowsize):
                        temp.append(str(coff[4 + v]) + " " + variable2[v + 4*j + 16*k])
                    temp1 = " + ".join(temp)
                    temp1 = temp1.replace("+ -", "- ")
                    s = str(-coff[Twinkle.NUMBER - 1])
                    s = s.replace("--", "")
                    temp1 += " >= " + s
                    fileobj.write(temp1)
                    fileobj.write("\n")
        fileobj.close()


    def lr0(self, inp):
        lr0 = [20, 24, 38, 77, 49, 66, 30, 40, 76, 15, 46, 50, 17, 18, 61, 62]
        for i in range(4):
            for j in range(4):
                «»


    def constraints_by_threeway_fork(self, x, x1, x2, x3):
        """
        Generate the constraints by threeway fork
        x ---> (x1, x2, x3)
        """
        fileobj = open(self.model_file_name, "a")
        temp = [x, x1, x2, x3]
        s = " - ".join(temp) + " = 0\n"
        fileobj.write(s)
        fileobj.close()

    def constraints_by_threeway_xor(self, x1, x2, x3, x):
        """
        Generate the constraints by 4-bit threeway xor
        x1 + x2 + x3 = x
        """
        fileobj = open(self.model_file_name, "a")
        temp = [x, x1, x2, x3]
        s = " - ".join(temp) + " = 0\n"
        fileobj.write(s)
        fileobj.close()

    # Variables declaration
    def variable_binary(self):
        """
        Specify the variables type.
        """
        fileobj = open(self.model_file_name, "a")
        fileobj.write("Binary\n")
        for n in range(self.rounds + 1):
            for i in range(4):
                for j in range(4):
                    for k in range(80):
                            fileobj.write("x_%d_%d_%d\n" % (n, i, j, k))

        for n in range(self.rounds):
            for i in range(4):
                for j in range(4):
                    for k in range(80):
                            fileobj.write("y_%d_%d_%d\n" % (n, i, j, k))



        for n in range(self.rounds):
            for i in range(4):
                for j in range(4):
                    for k in range(80):
                            fileobj.write("z_%d_%d_%d\n" % (n, i, j, k))


        for n in range(self.rounds):
            for i in range(4):
                for j in range(4):
                    for k in range(80):
                            fileobj.write("w_%d_%d_%d\n" % (n, i, j, k))
                
            fileobj.write("END")
            fileobj.close()


    def Constraint(self):
        """
        Generate the constraints used in the MILP model.
        """
        assert(self.rounds >= 1)
        fileobj = open(self.filename_model, "a")
        fileobj.write("Subject To\n")
        fileobj.close()

        variablein = Twinkle.create_variables(0, 'x')
        variableout = Twinkle.create_variables(0, 'y')
        self.sbox(variablein, variableout)
        self.lr0(variableout)


        #for i in range(1, self.Round):
        #    variablein = Present.LinearLaryer(variableout)
        #    variableout= Present.CreateVariables(i + 1)
        #    self.ConstraintsBySbox(variablein, variableout)
        #    #omit the last linear layer



    def MakeModel(self):
        """
        Generate the MILP model of Twinkle given the round number and activebits.
        """
        self.CreateObjectiveFunction()
        self.Constraint()
        # self.Init()
        # self.VariableBinary()



